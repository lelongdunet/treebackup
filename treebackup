#!/bin/bash
# This file is part of the treebackup project
# Copyright (C) 2012-2014  Adrien LELONG
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

function help()
{
    echo "treebackup profname [cmd] [args]"
    echo ""
    echo "Whithout any command treebackup perform the incremental backup of the specified profile"
    echo ""
    echo "Commands:"
    echo " 'list' : list of all versions"
    echo " 'mkdb ver' : make a dar_manager database for the specified version"
    echo " 'sync' : Synchronize backup data with distant replica"
    echo " 'mirror' : Install distant replica directory"
    echo " 'help' : display this"
}

set -e

if [ $# -eq 0 ]; then
    help
    exit
fi

#Color values
NORMAL=`echo -e '\033[0m'`
BOLD=`echo -e '\033[1m'`
UNDERLINE=`echo -e '\033[4m'`
BACKRED=`echo -e '\033[41m'`
RED=`echo -e '\033[31m'`



confdir="$HOME/.treebackup"
libdir="$HOME/.treebackup/lib"
datadir="."


if [ ! -d $libdir/ ]; then
    libdir=bin/lib
fi
bindir="$libdir/bin"

source $libdir/gettext.sh
source $libdir/logger.sh
source $libdir/util.sh

profile=$1
conffile=$confdir/$profile.prf
datafile=$profile.backup.dat
DAROPTIONS="-z"
n_trash=3
verbosedebug="true"
verbose="true"
warnings="true"
BM_LOGGER="true"
BM_LOGGER_LEVEL="debug"

check_logger

if [ ! -f .replica.$profile ]; then
    source $conffile
else
    #if it is a replica no configuration file
    datadir=data
    BACKUPPATH=.
fi

function LISTBACKUP()
{
    ls -1 $PREFIX_PATH.* | sed 's/^.*\///' | awk '{print ">", $0}'
}

if [ ! -z $MIRROR_PORT ]; then
    SSHCMD="ssh -p$MIRROR_PORT"
else
    SSHCMD="ssh"
fi
SHELL=bash

PREFIX=$profile
PREFIX_PATH=$datadir/$profile

day=$(get_day)
#week=$(date "+%W")
month=$(get_month)
year=$(get_year)
if [ -z $WEEKBASIS ]; then
    week='0'
else
    d=$((10#$(echo $day)))
    week=$((($d+2)/7))
fi

cd "$BACKUPPATH"
trashdir="$BACKUPPATH/trash.$profile"
tmpdatafile=$datafile.tmp
lockfile=.lock.$profile
name=$PREFIX.$year-$month-$week-$day
name_path=$datadir/$name

####################################"
# Last record memory
# 
# YEARBEFORE
# MONTHBEFORE
# WEEKBEFORE
# DAYBEFORE
# YEARLAST
# MONTHLAST
# WEEKLAST
# DAYLAST

info "Backup of profile $profile, ROOT=$ROOTPATH to $BACKUPPATH"

if [ $# -gt 1 ]; then
   case $2 in
       list )
           cd $datadir
           ls -ltr --time-style=long-iso $profile.*.lst|grep -v '\->'|sed "s/^.*\s\(\w\+-\w\+-\w\+\s\w\+:\w\+\)\s\(.*\)\.lst\s*$/ $BOLD$UNDERLINE$RED \1 $NORMAL  (\2)/"
           exit ;;
       mkdb )
           if [ $# -lt 3 ]; then
               echo "$RED You must specify a version!"
               exit 1
           fi
           ver=$3
           lstfile=$datadir/$ver.lst
           if [[ ! -f $lstfile ]]; then
               echo "$RED Version $ver does not exist!"
               exit 1
           fi
           dmdname=$ver.dmd
           dar_manager -C $dmdname
           dar_manager -B $dmdname -o -R restore/$ver -O -wa
           if [[ ! -d restore/$ver ]]; then
               mkdir -p restore/$ver
           fi
           echo "Add catalogs to db..."
           for i in `cat $lstfile`
           do
               echo "     $i"
               dar_manager -B $dmdname -A $datadir/$i
           done
           echo "ok"
           echo "--------------------------------"
           echo "Commands :"
           echo "'dar_manager -B $dmdname -r path_to_file' to extract a file"
           echo "'dar_manager -B $dmdname -i' to enter interactive mode"
           echo "--------------------------------"
           exit;;
       mirror )
           rsync -e "$SSHCMD" -auvh $bindir/ $MIRROR_HOST:$MIRROR_PATH/bin/
           $SSHCMD $MIRROR_HOST $SHELL $MIRROR_PATH/bin/setupreplica.bash $profile
           exit;;
       sync )
           $SSHCMD $MIRROR_HOST $SHELL $MIRROR_PATH/bin/presync.bash $profile
           rsync -e "$SSHCMD" -auvh $PREFIX_PATH.* $MIRROR_HOST:$MIRROR_PATH/data/
           rsync -e "$SSHCMD" -u $datafile $MIRROR_HOST:$MIRROR_PATH/
           $SSHCMD $MIRROR_HOST $SHELL $MIRROR_PATH/bin/postsync.bash $profile > .postsync.out
           LISTBACKUP|egrep '^>' > .local.list
           egrep '^>' .postsync.out > .dist.list
           diff .local.list .dist.list
           exit;;
       postsync )
           if [ ! -f .replica.$profile ]; then
               echo "This dir is not a replica of $PROFILE!"
               exit 1
           fi
           if [ ! -f $datafile ]; then
               echo "Critical file $datafile absent! Sync not made properly."
               exit 1
           fi
           unlock
           LISTBACKUP
           exit;;
       help )
           help
           exit;;
       * )
           echo "$RED Error bad command!" $NORMAL
           help
           exit 1;;
   esac

elif [[ -f $datafile ]]; then
    echo "getting $datafile"
    source $datafile

    nextyearbefore=$YEARBEFORE
    nextmonthbefore=$MONTHBEFORE
    nextweekbefore=$WEEKBEFORE


    lock

    if test $datafile -nt $lockfile; then
        unlock
        error "Incoherent file dates. Check system time!"
    fi

    #update trash
    echo "Clear trash..."
    clear_trash

    lock_info "TRASHEMPTY"

    #start backup
    if [[ $year != $YEARLAST ]]; then
        previous=$PREFIX.$YEARLAST
        name=$PREFIX.$year
        name_path=$datadir/$name
        link_dar $name_path $PREFIX_PATH.$year-$month
        link_dar $name_path $PREFIX_PATH.$year-$month-$week
        link_dar $name_path $PREFIX_PATH.$year-$month-$week-$day
        lock_info "LINKED"

        rm_files $PREFIX_PATH.$WEEKBEFORE-*
        rm_files $PREFIX_PATH.$MONTHBEFORE-*
        rm_files $PREFIX_PATH.$YEARBEFORE-*
        lock_info "REMOVED"

        nextyearbefore=$YEARLAST
        nextmonthbefore=$YEARLAST-$MONTHLAST
        nextweekbefore=$YEARLAST-$MONTHLAST-$WEEKLAST
        debug "New year, remove children for year $YEARBEFORE, month $MONTHBEFORE and week $WEEKBEFORE in profile $profile"
    elif [[ $month != $MONTHLAST ]]; then
        previous=$PREFIX.$year-$MONTHLAST
        name=$PREFIX.$year-$month
        name_path=$datadir/$name
        link_dar $name_path $PREFIX_PATH.$year-$month-$week
        link_dar $name_path $PREFIX_PATH.$year-$month-$week-$day
        lock_info "LINKED"

        rm_files $PREFIX_PATH.$WEEKBEFORE-*
        rm_files $PREFIX_PATH.$MONTHBEFORE-*
        lock_info "REMOVED"
        nextmonthbefore=$YEARLAST-$MONTHLAST
        nextweekbefore=$YEARLAST-$MONTHLAST-$WEEKLAST
        debug "New month, remove children for month $MONTHBEFORE and week $WEEKBEFORE in profile $profile"
    elif [[ $week != $WEEKLAST ]]; then
        previous=$PREFIX.$year-$month-$WEEKLAST
        name=$PREFIX.$year-$month-$week
        name_path=$datadir/$name
        link_dar $name_path $PREFIX_PATH.$year-$month-$week-$day
        lock_info "LINKED"
        rm_files $PREFIX_PATH.$WEEKBEFORE-*
        lock_info "REMOVED"
        nextweekbefore=$YEARLAST-$MONTHLAST-$WEEKLAST
        debug "New week, remove children for week $WEEKBEFORE in profile $profile"
    elif [[ $day != $DAYLAST ]]; then
        previous=$PREFIX.$year-$month-$week-$DAYLAST
        name=$PREFIX.$year-$month-$week-$day
        name_path=$datadir/$name
    else
        unlock
        error "Backup already up to date : nothing to do"
    fi

    lock_info "START"
    lock_name $name

    if [ -f .replica.$profile ]; then
        #If current backup is a replica, d'ont create archives
        lock_info "WAITSYNC"
    else
        #Make new archive
        info "Incremental backup of $profile saved in $BACKUPPATH/$name_path with reference $previous"
        dar $DAROPTIONS -c $name_path -A $datadir/$previous -R "$ROOTPATH"
        append_list_file $previous $name
        lock_info "SAVED"
        debug "dar $DAROPTIONS -c $name -A $previous -R $ROOTPATH"
    fi

else
    warning "$datafile does not exist. Make a full archive backup of $profile"

    nextyearbefore="00"
    nextmonthbefore="00-00"
    nextweekbefore="00-00-0"

    lock
    lock_info "FIRST"

    name=$PREFIX.master
    name_path=$datadir/$name

    mkdir -p "$datadir"

    #Make new archive
    lock_info "START"
    lock_name $name
    dar $DAROPTIONS -c $name_path -R "$ROOTPATH"
    create_list_file $name

    #Build base nodes as symlinks to first archive master
    link_dar $name_path $PREFIX_PATH.$year
    link_dar $name_path $PREFIX_PATH.$year-$month
    link_dar $name_path $PREFIX_PATH.$year-$month-$week
    link_dar $name_path $PREFIX_PATH.$year-$month-$week-$day

    link_dar $name_path $PREFIX_PATH.$nextyearbefore
    link_dar $name_path $PREFIX_PATH.$nextmonthbefore
    link_dar $name_path $PREFIX_PATH.$nextweekbefore

    link_dar $name_path $PREFIX_PATH.$nextyearbefore-X
    link_dar $name_path $PREFIX_PATH.$nextmonthbefore-X
    link_dar $name_path $PREFIX_PATH.$nextweekbefore-X

    #End creation
    lock_info "SAVED"
    debug "dar $DAROPTIONS -c $name -R $ROOTPATH"
    info "full backup of $profile saved in $BACKUPPATH/$name_path"
fi

if [ -f $datafile ]; then
    tmp_backup $datafile
fi

#Save tmpdatas for next backup
echo 'YEARBEFORE='$nextyearbefore > $tmpdatafile
echo 'MONTHBEFORE='$nextmonthbefore >> $tmpdatafile
echo 'WEEKBEFORE='$nextweekbefore >> $tmpdatafile
echo 'YEARLAST='$year >> $tmpdatafile
echo 'MONTHLAST='$month >> $tmpdatafile
echo 'WEEKLAST='$week >> $tmpdatafile
echo 'DAYLAST='$day >> $tmpdatafile


if [ -f .replica.$profile ]; then
    rm $datafile
else
    mv $tmpdatafile $datafile
    unlock
fi

