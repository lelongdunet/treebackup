#!/bin/bash

function help()
{
    echo "treebackup profname [cmd] [args]"
    echo ""
    echo "Whithout any command treebackup perform the incremental backup of the specified profile"
    echo ""
    echo "Commands:"
    echo " 'list' : list of all versions"
    echo " 'mkdb ver' : make a dar_manager database for the specified version"
    echo " 'help' : display this"
}

set -e

if [ $# -eq 0 ]; then
    help
    exit
fi

#Color values
NORMAL=`echo -e '\033[0m'`
BOLD=`echo -e '\033[1m'`
UNDERLINE=`echo -e '\033[4m'`
BACKRED=`echo -e '\033[41m'`
RED=`echo -e '\033[31m'`



confdir="$HOME/.treebackup"
#libdir="/usr/share/treebackup"
libdir="$HOME/.treebackup/lib"

source $libdir/gettext.sh
source $libdir/logger.sh
source $libdir/util.sh

profile=$1
conffile=$confdir/$profile.prf
datafile=$profile.backup.dat
PREFIX=$profile
DAROPTIONS="-z"
n_trash=3
verbosedebug="true"
verbose="true"
warnings="true"
BM_LOGGER="true"
BM_LOGGER_LEVEL="debug"

check_logger

source $conffile

day=$(date "+%d")
#week=$(date "+%W")
month=$(date "+%m")
year=$(date "+%y")
if [ -z $WEEKBASIS ]; then
    week='0'
else
    d=$((10#$(echo $day)))
    week=$((($d+2)/7))
fi

echo $day

cd "$BACKUPPATH"
trashdir="$BACKUPPATH/trash.$profile"
tmpdatafile=$datafile.tmp
lockfile=.lock.$profile
name=$PREFIX.$year-$month-$week-$day

####################################"
# Last record memory
# 
# YEARBEFORE
# MONTHBEFORE
# WEEKBEFORE
# DAYBEFORE
# YEARLAST
# MONTHLAST
# WEEKLAST
# DAYLAST

info "Backup of profile $profile, ROOT=$ROOTPATH to $BACKUPPATH"

if [ $# -gt 1 ]; then
   case $2 in
       list )
           ls -ltr --time-style=long-iso $profile.*.lst|grep -v '\->'|sed "s/^.*\s\(\w\+-\w\+-\w\+\s\w\+:\w\+\)\s\(.*\)\.lst\s*$/ $BOLD$UNDERLINE$RED \1 $NORMAL  (\2)/"
           exit ;;
       mkdb )
           if [ $# -lt 3 ]; then
               echo "$RED You must specify a version!"
               exit 1
           fi
           ver=$3
           if [[ ! -f $ver.lst ]]; then
               echo "$RED Version $ver does not exist!"
               exit 1
           fi
           dmdname=$ver.dmd
           dar_manager -C $dmdname
           dar_manager -B $dmdname -o -R restore/$ver -O -wa
           if [[ ! -d restore/$ver ]]; then
               mkdir restore/$ver
           fi
           echo "Add catalogs to db..."
           for i in `cat $ver.lst`
           do
               echo "     $i"
               dar_manager -B $dmdname -A $i
           done
           echo "ok"
           echo "--------------------------------"
           echo "Commands :"
           echo "'dar_manager -B $dmdname -r path_to_file' to extract a file"
           echo "'dar_manager -B $dmdname -i' to enter interactive mode"
           echo "--------------------------------"
           exit;;
       help )
           help
           exit;;
       * )
           echo "$RED Error bad command!" $NORMAL
           help
           exit 1;;
   esac

elif [[ -f $datafile ]]; then
    echo "getting $datafile"
    source $datafile

    nextyearbefore=$YEARBEFORE
    nextmonthbefore=$MONTHBEFORE
    nextweekbefore=$WEEKBEFORE


    lock

    if test $datafile -nt $lockfile; then
        unlock
        error "Incoherent file dates. Check system time!"
    fi

    #update trash
    echo "Clear trash..."
    clear_trash

    lock_info "TRASHEMPTY"

    #start backup
    if [[ $year != $YEARLAST ]]; then
        previous=$PREFIX.$YEARLAST
        name=$PREFIX.$year
        link_dar $name $PREFIX.$year-$month
        link_dar $name $PREFIX.$year-$month-$week
        link_dar $name $PREFIX.$year-$month-$week-$day
        lock_info "LINKED"

        rm_files $PREFIX.$WEEKBEFORE-*
        rm_files $PREFIX.$MONTHBEFORE-*
        rm_files $PREFIX.$YEARBEFORE-*
        lock_info "REMOVED"

        nextyearbefore=$YEARLAST
        nextmonthbefore=$YEARLAST-$MONTHLAST
        nextweekbefore=$YEARLAST-$MONTHLAST-$WEEKLAST
        debug "New year, remove children for year $YEARBEFORE, month $MONTHBEFORE and week $WEEKBEFORE in profile $profile"
    elif [[ $month != $MONTHLAST ]]; then
        previous=$PREFIX.$year-$MONTHLAST
        name=$PREFIX.$year-$month
        link_dar $name $PREFIX.$year-$month-$week
        link_dar $name $PREFIX.$year-$month-$week-$day
        lock_info "LINKED"

        rm_files $PREFIX.$WEEKBEFORE-*
        rm_files $PREFIX.$MONTHBEFORE-*
        lock_info "REMOVED"
        nextmonthbefore=$YEARLAST-$MONTHLAST
        nextweekbefore=$YEARLAST-$MONTHLAST-$WEEKLAST
        debug "New month, remove children for month $MONTHBEFORE and week $WEEKBEFORE in profile $profile"
    elif [[ $week != $WEEKLAST ]]; then
        previous=$PREFIX.$year-$month-$WEEKLAST
        name=$PREFIX.$year-$month-$week
        link_dar $name $PREFIX.$year-$month-$week-$day
        lock_info "LINKED"
        rm_files $PREFIX.$WEEKBEFORE-*
        lock_info "REMOVED"
        nextweekbefore=$YEARLAST-$MONTHLAST-$WEEKLAST
        debug "New week, remove children for week $WEEKBEFORE in profile $profile"
    elif [[ $day != $DAYLAST ]]; then
        previous=$PREFIX.$year-$month-$week-$DAYLAST
        name=$PREFIX.$year-$month-$week-$day
    else
        unlock
        error "Backup already up to date : nothing to do"
    fi

    lock_info "START"
    lock_name $name

    #Make new archive
    info "Incremental backup of $profile saved in $BACKUPPATH/$name with reference $previous"
    dar $DAROPTIONS -c $name -A $previous -R "$ROOTPATH"
    append_list_file $previous $name
    lock_info "SAVED"
    debug "dar $DAROPTIONS -c $name -A $previous -R $ROOTPATH"

else
    warning "$datafile does not exist. Make a full archive backup of $profile"

    nextyearbefore="00"
    nextmonthbefore="00-00"
    nextweekbefore="00-00-0"

    lock
    lock_info "FIRST"

    name=$PREFIX.master
    link_dar $name $PREFIX.$year
    link_dar $name $PREFIX.$year-$month
    link_dar $name $PREFIX.$year-$month-$week
    link_dar $name $PREFIX.$year-$month-$week-$day

    link_dar $name $PREFIX.$nextyearbefore
    link_dar $name $PREFIX.$nextmonthbefore
    link_dar $name $PREFIX.$nextweekbefore

    link_dar $name $PREFIX.$nextyearbefore-X
    link_dar $name $PREFIX.$nextmonthbefore-X
    link_dar $name $PREFIX.$nextweekbefore-X
    #Make new archive
    lock_info "START"
    lock_name $name
    dar $DAROPTIONS -c $name -R "$ROOTPATH"
    create_list_file $name
    lock_info "SAVED"
    debug "dar $DAROPTIONS -c $name -R $ROOTPATH"
    info "full backup of $profile saved in $BACKUPPATH/$name"

    #Make an associated trash directory
    mkdir $trashdir
fi

tmp_backup $datafile

#Save tmpdatas for next backup
echo 'YEARBEFORE='$nextyearbefore > $tmpdatafile
echo 'MONTHBEFORE='$nextmonthbefore >> $tmpdatafile
echo 'WEEKBEFORE='$nextweekbefore >> $tmpdatafile
echo 'YEARLAST='$year >> $tmpdatafile
echo 'MONTHLAST='$month >> $tmpdatafile
echo 'WEEKLAST='$week >> $tmpdatafile
echo 'DAYLAST='$day >> $tmpdatafile

mv $tmpdatafile $datafile

unlock

